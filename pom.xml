<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 
		version。 -->
	<!-- <parent> -->
	<!--被继承的父项目的构件标识符 -->
	<!-- <artifactId /> -->
	<!--被继承的父项目的全球唯一标识符 -->
	<!-- <groupId /> -->
	<!--被继承的父项目的版本 -->
	<!-- <version /> -->
	<!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 
		目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 -->
	<!-- <relativePath /> -->
	<!-- </parent> -->
	<!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
	<modelVersion>4.0.0</modelVersion>
	<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
	<groupId>studio.baxia</groupId>
	<!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 
		特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 -->
	<artifactId>fire.dbutil</artifactId>
	<!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
	<packaging>jar</packaging>
	<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
	<version>1.0-SNAPSHOT</version>
	<!--项目的名称, Maven产生的文档用 -->
	<name>fire.dbutil by baxia Maven Webapp</name>
	<!--项目主页的URL, Maven产生的文档用 -->
	<url>http://baxia.studio/fire/dbutil</url>
	<!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 
		签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->
	<description>霸下工作室制作的一个maven原型项目.</description>
	<!--项目开发者列表 -->
	<developers>
		<!--某个项目开发者的信息 -->
		<developer>
			<!--SCM里项目开发者的唯一标识符 -->
			<id>fireoct</id>
			<!--项目开发者的全名 -->
			<name>潘海南</name>
			<!--项目开发者的email -->
			<email>panhainan@yeah.net</email>
			<!--项目开发者的主页的URL -->
			<url>http://www.panhainan.com</url>
			<!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->
			<roles>
				<role>Project Manager</role>
				<role>Architect</role>
			</roles>
			<!--项目开发者所属组织 -->
			<organization>霸下工作室</organization>
			<!--项目开发者所属组织的URL -->
			<organizationUrl>http://baxia.studio</organizationUrl>
			<!--项目开发者属性，如即时消息如何处理等 -->
			<properties>
				<dept>Yes</dept>
			</properties>
			<!--项目开发者所在时区， -11到12范围内的整数。 -->
			<timezone>8</timezone>
		</developer>
	</developers>
	<!--项目的其他贡献者列表 -->
	<contributors>
		<!--项目的其他贡献者。参见developers/developer元素 -->
		<contributor>
			<name />
			<email />
			<url />
			<organization />
			<organizationUrl />
			<roles />
			<timezone />
			<properties />
		</contributor>
	</contributors>
	<!--描述项目所属组织的各种属性。Maven产生的文档用 -->
	<organization>
		<!--组织的全名 -->
		<name>霸下工作室</name>
		<!--组织主页的URL -->
		<url>http://baxia.studio</url>
	</organization>
	<!-- 指定maven仓库 -->
	<repositories>
		<!-- 发现依赖和扩展的远程资源库 -->
		<!-- 阿里巴巴发布版本仓库 -->
		<repository>
			<id>alibaba-opensource</id>
			<name>alibaba-opensource</name>
			<url>http://code.alibabatech.com/mvn/releases/</url>
			<layout>default</layout>
		</repository>
		<!-- 阿里巴巴快照版本仓库 -->
		<repository>
			<id>alibaba-opensource-snapshot</id>
			<name>alibaba-opensource-snapshot</name>
			<url>http://code.alibabatech.com/mvn/snapshots/</url>
			<layout>default</layout>
		</repository>
	</repositories>
	<!-- 定义常量 -->
	<properties>
		<junit.version>4.11</junit.version>
		<java.version>1.7</java.version>
		<mysql.version>5.1.29</mysql.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencies>
		<!-- junit测试包 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- mysql驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.version}</version>
		</dependency>

	</dependencies>
	<!-- maven打成war包放到tomcat目录下，即可运行 -->
	<build>
		<finalName>${artifactId}</finalName>
		<!-- <resources> <resource> <targetPath>${project.build.directory}/classes</targetPath> 
			<directory>src/main/resources</directory> <filtering>true</filtering> <includes> 
			<include>**/*.xml</include> <include>**/*.properties</include> </includes> 
			</resource> </resources> -->
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId> 
				<version>2.0</version> <executions> <execution> <phase>package</phase> <goals> 
				<goal>shade</goal> </goals> <configuration> <shadedArtifactAttached>true</shadedArtifactAttached> 
				<shadedClassifierName>executable</shadedClassifierName> </configuration> 
				</execution> </executions> </plugin> -->
		</plugins>
	</build>
</project>

